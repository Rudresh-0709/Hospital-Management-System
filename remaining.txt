AI chatbot / AI voice agent to book appointments, etc.


*patientside
0)Appointment booking (done)
6)nurse allocation(done)
7)nurse roles and new nurse table(done)
1)Prescription to patients(doctorside,patientside){
    make an option for viewing scheduled patients and it will show the patients whose appointment is scheduled for the current hour i.e. if current time is 1 oclock then run query to show the patients who have been schduled from 12 to 2 oclock and then give options for completed the app, cancelled the app, view uploaded documents and prescribe medicines
}(done)
3)diagnosis table (mysql)(done)

0.1)New Product,view products and delete product


2)medical reports(x ray,mri,etc.)(all side)
4)billing and insurance(patient and admin side)
5)divide admin two options :in patient and out patient


Features Yet to Be Implemented
Diagnosis Management

Detailed diagnosis entry linked to admitted patients.
Diagnosis history and treatment plans.
Patient Login

Patient portal for scheduling doctor visits and accessing records.
Appointment Scheduling

System for scheduling doctor appointments and tracking availability.
Billing and Payment

Module for patient billing and payment processing.
Pharmacy and Inventory

Integration for managing medications and supplies.
Admin Panel

Role-based access for hospital administrators.
Notifications

SMS or email notifications for visits, appointments, and billing.
Advanced Reports

Generation of detailed reports on patient diagnosis, visits, and financials.
Integration with Other Systems

Modules like radiology, laboratory, or external APIs for advanced medical tests.



<script>
        // Retrieve currentUser and activeReceiver info
        const currentUser = JSON.parse(document.getElementById("currentUser").getAttribute("data-user"));
        const activeReceiverElement = document.getElementById("activeReceiver");
        const activeReceiver = activeReceiverElement ? JSON.parse(activeReceiverElement.getAttribute("data-user")) : null;

        // If activeReceiver is available, show its name in the header
        if (activeReceiver && activeReceiver.name) {
        document.getElementById("chat-receiver-name").innerText = activeReceiver.name;
        }

        // function renderMessage(message) {
        //     const msgDiv = document.createElement("div");
        //     msgDiv.classList.add("message");

        //     // Convert sender ID to string for comparison
        //     const senderId = (message.senderId || message.sender._id || message.sender).toString();
        //     const isCurrentUser = senderId === currentUser._id.toString();

        //     const senderName = isCurrentUser ? "You" : (message.senderName || "Anonymous");

        //     // Assign correct CSS classes based on sender
        //     if (isCurrentUser) {
        //         msgDiv.classList.add("sent");
        //         msgDiv.innerHTML = `
        //             <div class="message-content sent-message">
        //                 ${message.message} 
        //                 <small>${new Date(message.timestamp).toLocaleTimeString()}</small>
        //             </div>
        //         `;
        //     } else {
        //         msgDiv.classList.add("received");
        //         msgDiv.innerHTML = `
        //             <div class="message-content received-message">
        //                 ${message.message} 
        //                 <small>${new Date(message.timestamp).toLocaleTimeString()}</small>
        //             </div>
        //         `;
        //     }

        //     const messageContainer = document.getElementById("message-container");
        //     messageContainer.appendChild(msgDiv);

        //     // Auto-scroll to the bottom
        //     messageContainer.scrollTop = messageContainer.scrollHeight;
        // }

        let lastMessageDate = null; // To track the last rendered message date

        .then(messages => {
        if (Array.isArray(messages)) { // Ensure messages is an array
            messages.forEach(renderMessage);
        } else {
            console.error("Unexpected response format:", messages);
        }
        const msgContainer = document.getElementById("message-container");
        msgContainer.scrollTop = msgContainer.scrollHeight;
    })

        // Format date as YYYY-MM-DD for comparison
        // Format date as YYYY-MM-DD in local time
        function formatDate(date) {
            return date.getFullYear() + "-" + 
                String(date.getMonth() + 1).padStart(2, '0') + "-" + 
                String(date.getDate()).padStart(2, '0');
        }


        // Generate "Today", "Yesterday", or exact date
        function getFriendlyDateLabel(date) {
            const today = new Date();
            const yesterday = new Date();
            yesterday.setDate(today.getDate() - 1);

            if (formatDate(date) === formatDate(today)) return "Today";
            if (formatDate(date) === formatDate(yesterday)) return "Yesterday";

            return date.toLocaleDateString(); // Show full date if older
        }


        // Load existing messages with fetch (if there is an active conversation)
        if (activeReceiver) {
            fetch(`/chat/conversation?senderId=${currentUser._id}&receiverId=${activeReceiver._id}`)
                .then(response => response.json())
                .then(messages => {
                    messages.forEach(renderMessage);
                    // Auto scroll to the bottom of chat history
                    const msgContainer = document.getElementById("message-container");
                    msgContainer.scrollTop = msgContainer.scrollHeight;
                })
                .catch(err => console.error('Error fetching messages:', err));
        }

        // Initialize Socket.IO and pass receiverId if available
        const socket = io('/chat', {
            query: {
                userId: currentUser._id || "",
                receiverId: activeReceiver ? activeReceiver._id : ""
            }
        });

        socket.on('connect', () => {
            console.log("Connected with id:", socket.id);
            socket.emit('userEvent', { message: 'User has joined the chat' });
        });

        // Listen for new incoming messages
        socket.on('message', (data) => {
            console.log('Message received:', data);
            renderMessage(data);
            const msgContainer = document.getElementById("message-container");
            msgContainer.scrollTop = msgContainer.scrollHeight;
            addMessageToUI(data);
        });

        // Handle chat message send event
        document.getElementById("message-form").addEventListener('submit', (e) => {
            e.preventDefault();
            const messageInput = document.getElementById("message-input");
            const message = messageInput.value.trim();

            if (message !== "" && activeReceiver) {
                const msgData = {
                    senderId: currentUser._id,
                    senderName: currentUser.name,
                    receiverId: activeReceiver._id,
                    message: message,
                    timestamp: new Date().toISOString()
                };

                console.log("Sending message:", msgData); // Debugging log

                // Emit message to server but DO NOT render it locally
                socket.emit('chatMessage', msgData);

                // Clear the input field
                messageInput.value = "";
            }
        });



        // Keep your existing online/offline event handlers below...
        socket.on('userOffline', (data) => {
            console.log('User is offline:', data);
            // Remove the online indicator for the patient with matching userId
            const patientElem = document.getElementById("patient-" + data.userId);
            if (patientElem) {
                const onlineIndicator = patientElem.querySelector(".online-indicator");
                if (onlineIndicator) {
                    onlineIndicator.remove();
                }
            }
        });
        socket.on('userOnline', (data) => {
            console.log('User is online:', data);
            // Add the online indicator for the patient with matching userId
            const patientElem = document.getElementById("patient-" + data.userId);
            if (patientElem) {
                const avatarContainer = patientElem.querySelector(".avatar-container");
                // Only add if it doesn't already exist
                if (avatarContainer && !avatarContainer.querySelector(".online-indicator")) {
                    const indicator = document.createElement("span");
                    indicator.className = "online-indicator";
                    avatarContainer.appendChild(indicator);
                }
            }
        });
        socket.on('userEvent', (data) => {
            console.log('Server says:', data);
        });
    </script>