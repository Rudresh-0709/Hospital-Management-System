<script>
        // ✅ Get current user details
        const currentUser = JSON.parse(document.getElementById("currentUser").getAttribute("data-user"));
        
        let activeReceiver = null; // Stores the selected chat user
        let socket = io('/chat', { autoConnect: false ,
            query: { userId: currentUser._id }
        }); // ✅ Only connect when needed
    
        document.addEventListener("DOMContentLoaded", () => {
            console.log("🚀 Chat page loaded");
    
            // ✅ Connect to socket only after the page is loaded
            if (!socket.connected) {
                socket.connect();
            }
        });
    
        // ✅ Handle user profile click to start chat
        document.querySelectorAll(".user-profile").forEach(profile => {
            profile.addEventListener("click", (event) => {
                event.preventDefault();
                
                const receiverId = event.currentTarget.getAttribute("data-user-id");
                console.log("🔹 Clicked User Profile:", receiverId);
    
                if (!receiverId) {
                    console.error("⚠️ No receiverId found!");
                    return;
                }
    
                activeReceiver = { _id: receiverId };
                document.getElementById("chat-receiver-name").innerText = event.currentTarget.innerText.trim();
    
                startChatWithUser(receiverId);
            });
        });
    
        function startChatWithUser(receiverId) {
            if (!receiverId) {
                console.error("❌ No receiverId provided!");
                return;
            }
    
            console.log("🔗 Connecting to chat room:", { 
                userId: currentUser._id, 
                receiverId 
            });
    
            if (!socket.connected) {
                socket.connect();
            }
    
            // ✅ Join the chat room
            socket.emit("joinRoom", { userId: currentUser._id, receiverId });
    
            // ✅ Fetch previous messages
            fetchMessages(receiverId);
        }
    
        function fetchMessages(receiverId) {
            console.log("📩 Fetching messages for:", receiverId);
    
            fetch(`/chat/conversation?senderId=${currentUser._id}&receiverId=${receiverId}`)
                .then(response => response.json())
                .then(messages => {
                    const messageContainer = document.getElementById("message-container");
                    messageContainer.innerHTML = ""; // ✅ Clear old messages
    
                    if (Array.isArray(messages)) {
                        messages.forEach(renderMessage);
                    } else {
                        console.error("Unexpected response format:", messages);
                    }
                })
                .catch(err => console.error("❌ Error fetching messages:", err));
        }
    
        function renderMessage(message) {
            console.log("📩 Rendering message:", message);
    
            const messageContainer = document.getElementById("message-container");
            const msgDiv = document.createElement("div");
            msgDiv.classList.add("message");
    
            const senderId = (message.senderId || message.sender._id || message.sender).toString();
            const isCurrentUser = senderId === currentUser._id.toString();
    
            const messageDate = new Date(message.timestamp);
            const formattedDate = messageDate.toLocaleTimeString();
    
            msgDiv.classList.add(isCurrentUser ? "sent" : "received");
            msgDiv.innerHTML = `
                <div class="message-content ${isCurrentUser ? "sent-message" : "received-message"}">
                    ${message.message}
                    <small>${formattedDate}</small>
                </div>
            `;
    
            messageContainer.appendChild(msgDiv);
            messageContainer.scrollTop = messageContainer.scrollHeight; // ✅ Auto-scroll
        }
    
        // ✅ Listen for incoming messages and update the UI in real-time
        socket.on("message", (message) => {
            console.log("📩 New message received:", message);
    
            if (!activeReceiver || activeReceiver._id !== message.senderId) {
                console.log("🚨 Message is for another chat, ignoring...");
                return;
            }
    
            renderMessage(message);
        });
    
        // ✅ Prevent form from refreshing the page on submit
        document.getElementById("message-form").addEventListener("submit", function (event) {
            event.preventDefault();

            const messageInput = document.getElementById("message-input");
            const messageText = messageInput.value.trim();

            if (!messageText || !activeReceiver || !socket.connected) {
                console.warn("⚠️ Cannot send message. Missing data.");
                return;
            }

            const messageData = {
                senderId: currentUser._id,  // ✅ Ensure correct ID
                receiverId: activeReceiver._id, // ✅ Ensure correct ID
                message: messageText
            };

            console.log("📤 Sending message:", messageData);

            // ✅ Emit message
            socket.emit("chatMessage", messageData);

            // ✅ Add message to UI instantly
            renderMessage({ ...messageData, timestamp: new Date() });

            // ✅ Clear input field
            messageInput.value = "";
        });

        // ✅ Handle online/offline status updates

// ✅ Handle user going offline
// ✅ Receiving Messages (Works Fine)
// ✅ Listen for incoming messages in real-time
socket.on("chatMessage", (message) => {
    console.log("📩 New message received:", message);

    // ✅ Only update the UI if it's for the currently active chat
    if (activeReceiver && activeReceiver._id === message.senderId) {
        renderMessage(message);
    }
});


// ⚠️ Online/Offline Status (Had Issues Before)
socket.on('userOnline', (data) => {
    console.log(`✅ User Online Event Received:`, data);

    const userElement = document.getElementById("patient-" + data.userId);
    if (userElement) {
        const avatarContainer = userElement.querySelector(".avatar-container");
        if (avatarContainer) {
            let indicator = avatarContainer.querySelector(".online-indicator");
            if (!indicator) {
                indicator = document.createElement("span");
                indicator.classList.add("online-indicator");
                avatarContainer.appendChild(indicator);
            }
            indicator.style.backgroundColor = "green"; // ✅ Online
        }
    }
});

socket.on('userOffline', (data) => {
    console.log(`❌ User Offline Event Received:`, data);

    const userElement = document.getElementById("patient-" + data.userId);
    if (userElement) {
        const avatarContainer = userElement.querySelector(".avatar-container");
        if (avatarContainer) {
            const indicator = avatarContainer.querySelector(".online-indicator");
            if (indicator) {
                indicator.style.backgroundColor = "red"; // ❌ Offline
            }
        }
    }
});

    </script>


    chatNamespace.on('connection', async (socket) => {
    const { userId } = socket.handshake.query;  // ✅ MongoDB _id

    if (!userId) {
        console.warn("⚠️ No userId provided for socket connection.");
        return;
    }

    socket.join(userId);  // ✅ Join the room with MongoDB _id
    console.log(`📡 User ${userId} connected (Socket ID: ${socket.id})`);

    try {
        // ✅ Update user online status in DB
        await User.findByIdAndUpdate(userId, { is_online: true });

        // ✅ Notify all users (this was the issue: notifying everyone, not just allowedUsers)
        chatNamespace.emit('userOnline', { userId });

    } catch (err) {
        console.error("❌ Error updating user online status:", err);
    }

    // 📨 Handle sending messages
    // socket.on('chatMessage', async ({ senderId, receiverId, message }) => {
    //     console.log(`📤 Message from ${senderId} to ${receiverId}:`, message);
    
    //     if (!senderId || !receiverId || !message) {
    //         console.error("⚠️ Missing sender, receiver, or message!");
    //         return;
    //     }
    
    //     try {
    //         const newMessage = new ChatMessage({
    //             sender: senderId,   // ✅ Changed senderId → sender (matches Mongoose model)
    //             receiver: receiverId, // ✅ Changed receiverId → receiver (matches Mongoose model)
    //             message: message,
    //             timestamp: new Date()
    //         });
    
    //         await newMessage.save();
    
    //         chatNamespace.to(receiverId).emit('chatMessage', { senderId, message });
    //     } catch (err) {
    //         console.error("❌ Error saving message:", err);
    //     }
    // });
    socket.on('chatMessage', async ({ senderId, receiverId, message }) => {
        console.log(`📤 Message from ${senderId} to ${receiverId}:`, message);
    
        if (!senderId || !receiverId || !message) {
            console.error("⚠️ Missing sender, receiver, or message!");
            return;
        }
    
        try {
            const newMessage = new ChatMessage({
                sender: senderId,   
                receiver: receiverId, 
                message: message,
                timestamp: new Date()
            });
    
            await newMessage.save();
    
            // ✅ Emit to the sender and receiver
            chatNamespace.to(senderId).emit("chatMessage", { senderId, receiverId, message });
            chatNamespace.to(receiverId).emit("chatMessage", { senderId, receiverId, message });
    
            console.log(`✅ Message sent to ${receiverId} in real-time.`);
        } catch (err) {
            console.error("❌ Error saving message:", err);
        }
    });
    

    // 🔌 Handle user disconnection
    socket.on('disconnect', async () => {
        console.log(`🔌 User ${userId} disconnected.`);

        try {
            // ✅ Update user offline status in DB
            await User.findByIdAndUpdate(userId, { is_online: false });

            // ✅ Notify all users (same issue: notifying everyone)
            chatNamespace.emit('userOffline', { userId });

        } catch (err) {
            console.error("❌ Error updating user offline status:", err);
        }

        socket.leave(userId);
    });
});